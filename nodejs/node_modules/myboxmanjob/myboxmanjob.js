var request = require('request');


var job = function(credentials,jobId,debug) {

  this.loadingAddress = "";
  this.deliveryAddress = "";
  this._loadingType = "ASAP";
  this._deliveryType = "ASAP";
  this._loadingDateTime1 = "";
  this._loadingDateTime2 = "";
  this._deliveryDateTime1 = "";
  this._deliveryDateTime2 = "";
  this._cardId = "";
  this.description = "";
  this.privateDescription = "";
  this.categoryId = "1";
  this.debug = debug;
  this._apiKey = "";
  this._apiSecret = "";
  this._id = "";
  this.title = "";
  this.price = "";
  this._availableType = "";
  this._waitingCalls = 0;

  if(debug==true) {
    credentials = {
      'AppKey':'4bhiovju-19zab-ypaot-md0k-dz2gghf1',
      'AppSecret':'y6bjgxjj-w6v9f-e9667-j68j-393q2p3s'
    }
  }

  this._apiKey = credentials.AppKey;
  this._apiSecret = credentials.AppSecret;

  if(jobId!==null) {
    this.loadJobFromJobId(jobId);
  }

  this.loadJobFromJobId = function(jobId,callback) {
    var self=this;
    var reqOptions = this._getBasicRequestOptions;

    reqOptions.url="getJobDetails";
    reqOptions.qs = {jobId:jobId};

    this._waitingCalls+=1;
    request(reqOptions,function(err,res,body) {
      body = JSON.parse(body);
      var job = body.response;
      self.title = job.title;
      self.description = job.description;
      self.privateDescription = job.privateDescription;
      self.categoryId = job.categoryId;
      self._id = job._id;
      self.loadingAddress = {
        city:job.origin.city,
        country:job.origin.country,
        street:job.origin.street,
        number:job.origin.streetNumber
      }
      self.deliveryAddress = {
        city:job.destination.city,
        country:job.destination.country,
        street:job.destination.street,
        number:job.destination.streetNumber
      }

      self._loadingType = job.loadingType;
      self._deliveryType = job.deliveryType;
      self.price = job.price;
      self._loadingDateTime1 = new Date(job.loadingDateTime1.timestamp);
      self._loadingDateTime2 = new Date(job.loadingDateTime2.timestamp);
      self._deliveryDateTime1 = new Date(job.deliveryDateTime1.timestamp);
      self._deliveryDateTime2 = new Date(job.deliveryDateTime2.timestamp);


    })
  }


  this.setLoadingAddress = function(number,street,city,country) {
    this.loadingAddress = {
      'number':number,
      'street':street,
      'city':city,
      'country':country
    }
  }

  this.getLoadingAddress = function() {
    return this.loadingAddress;
  }

  this.setDeliveryAddress = function(number,street,city,country) {
    this.deliveryAddress = {
      'number':number,
      'street':street,
      'city':city,
      'country':country
    }
  }

  this.getDeliveryAddress = function() {
    return this.deliveryAddress;
  }

  this.setLoadingType = function(loaType) {
    var self = this;
    self._getAvailableTypes(function(availableTypes) {
      if(availableTypes.indexOf(loaType)>-1) {
        self._loadingType = loaType;
      } else throw new Error('This loading type is not available');
    });
  }

  this.getLoadingType = function() {
    return this._loadingType;
  }

  this.setDeliveryType = function(delType) {
    var self = this;
    self._getAvailableTypes(function(availableTypes) {
      if(availableTypes.indexOf(delType)>-1) {
        self._deliveryType = delType;
      } else throw new Error('This delivery type is not available');

    });
  }

  this.getDeliveryType = function() {
    return this._deliveryType;
  }

  this.setLoadingDateTime = function(loadingDateTime1,loadingDateTime2) {
    if (typeof(loadingDateTime1)!='object' || loadingDateTime1.constructor.name!="Date") {
      throw new Error('LoadingDateTime1 is not in a valid format : Date object expected');
    }

    if (loadingDateTime2!="" && (typeof(loadingDateTime1)!='object' || loadingDateTime1.constructor.name!="Date")) {
      throw new Error('LoadingDateTime2 is not in a valid format : Date object expected or empty string');
    }

    this._loadingDateTime1 = loadingDateTime1;
    this._loadingDateTime2 = loadingDateTime2;
  }

  this.setDeliveryDateTime = function(deliveryDateTime1,deliveryDateTime2) {
    if (typeof(deliveryDateTime1)!='object' || deliveryDateTime1.constructor.name!="Date") {
      throw new Error('deliveryDateTime1 is not in a valid format : Date object expected');
    }

    if (deliveryDateTime2!="" && (typeof(deliveryDateTime2)!='object' || deliveryDateTime2.constructor.name!="Date")) {
      throw new Error('deliveryDateTime2 is not in a valid format : Date object expected or empty string');
    }

    this._deliveryDateTime1 = deliveryDateTime1;
    this._deliveryDateTime2 = deliveryDateTime2;
  }

  this.getLoadingTimes = function() {
    return {
      'loadingDateTime1':this._loadingDateTime1,
      'loadingDateTime2':this._loadingDateTime2
    };
  }

  this.getDeliveryTimes = function() {
    return {
      'deliveryDateTime1':this._deliveryDateTime1,
      'deliveryDateTime2':this._deliveryDateTime2
    };
  }

  this.getJobId = function() {
    return this._id;
  }


  this._getBasicRequestOptions = function() {
    if(this.debug) {
      baseUrl = 'http://staging.myboxman.com/api';
    } else baseUrl = 'http://app.myboxman.com/api';

    return {
      baseUrl:baseUrl,
      headers : {
        'App-Key':this._apiKey,
        'App-Secret':this._apiSecret
      }
    }
  }

  this._buildDataForMission = function() {
    var params =  {
      categoryId:this.categoryId,
      loadingType:this._loadingType,
      deliveryType:this._deliveryType,
      originCity:this.loadingAddress.city,
      originCountry:this.loadingAddress.country,
      originStreet:this.loadingAddress.street,
      originSreetNumber:this.loadingAddress.number,
      destinationCity:this.deliveryAddress.city,
      destinationCountry:this.deliveryAddress.country,
      destinationStreet:this.deliveryAddress.street,
      destinationStreetNumber:this.deliveryAddress.number,
      gmt:new Date().getTimezoneOffset()/-60
    };

    if(this._loadingType=="FIX") {
      var stringDate1 = this._generateStringDate(this._loadingDateTime1);
      params.loadingDateTime1 = stringDate1;
    }

    if(this._loadingType=="FLEXIBLE") {
      var stringDate1 = this._generateStringDate(this._loadingDateTime1);
      var stringDate2 = this._generateStringDate(this._loadingDateTime2);
      params.loadingDateTime1 = stringDate1;
      params.loadingDateTime2 = stringDate2;
    }

    if(this._deliveryType=="FIX") {
      var stringDate1 = this._generateStringDate(this._deliveryDateTime1);
      params.deliveryDateTime1 = stringDate1;
    }

    if(this._deliveryType=="FLEXIBLE") {
      var stringDate1 = this._generateStringDate(this._deliveryDateTime1);
      var stringDate2 = this._generateStringDate(this._deliveryDateTime2);
      params.deliveryDateTime1 = stringDate1;
      params.deliveryDateTime2 = stringDate2;
    }
    return params;
  }

  this._initCardId = function(cardInitiated) {

    if(this._cardId!="") {
      cardInitiated();
    }

    var reqOptions = this._getBasicRequestOptions();

    reqOptions.url='getCreditCards';
    var self = this;
    self._waitingCalls+=1;
    request(reqOptions,function(err,res,body){
      var body = JSON.parse(body);
      self._cardId = body.response[0].cardId;
      self._waitingCalls-=1;
      cardInitiated();
    })
  }

  this._getAvailableTypes = function(callback){
    var self = this;
    if(this._availableType!=""){
      callback(this._availableType);
    } else {
      var reqOptions = this._getBasicRequestOptions();

      reqOptions.url = 'getDateTypes';

      self._waitingCalls+=1;

      request(reqOptions,function(err,res,body){
        body = JSON.parse(body);
        self._waitingCalls-=1;
        this._availableType = body.response;
        callback(this._availableType);
      })
    }

  }

  this.getEstimation = function(callback) {
    var self = this;
    var waitingInterval = setInterval(function() {
      if(self._waitingCalls==0) {
        var reqOptions = self._getBasicRequestOptions();
        var params = self._buildDataForMission();


        reqOptions.url = 'getEstimation';
        reqOptions.qs = params;
        clearInterval(waitingInterval);
        self._waitingCalls+=1;
        request(reqOptions,function(err,res,body) {
          body = JSON.parse(body);
          self._waitingCalls-=1;
          callback(body.response);
        })
      }
    },100)
  }

  this.postJob = function(callback) {
    var self = this;
    this._initCardId(function cardInitiated() {

      var waitingInterval = setInterval(function(){
        if(self._waitingCalls==0) {
          var reqOptions = self._getBasicRequestOptions();
          var params = self._buildDataForMission();


          params.title = self.title;
          params.description = self.description;
          params.privateDescription = self.privateDescription;
          params.cardId = self._cardId;

          reqOptions.url='postJob';
          reqOptions.form = params;
          clearInterval(waitingInterval);
          self._waitingCalls+=1;
          request.post(reqOptions,function(err,res,body){
            self._waitingCalls-=1;
            body = JSON.parse(body);
            if(body.status==201) {
              self._id = body.response.jobId;
              callback(true);
            } else callback(false);
          })

        }
      },100)



    })


  }


  this._generateStringDate = function(date) {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    if(month<10) month='0'+month;
    var day = date.getDate();
    if(day<10) day='0'+day;
    var hours = date.getHours();
    if(hours<10) hours='0'+hours;
    var minutes = date.getMinutes();
    if(minutes<10) minutes='0'+minutes;
    var seconds = date.getSeconds();
    if(seconds<10) seconds='0'+seconds;

    return year+'-'+month+'-'+day+' '+hours+':'+minutes+':'+seconds;
  }

}

module.exports.job = job;
